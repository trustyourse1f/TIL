Git 기본 명령어
(1) git init
- 현재 작업 중인 디렉토리를 Git으로 관리한다는 명령어
- .git이라는 숨김폴더를 생성하고 터미널에는 (master)라고 표기된다.
※주의사항
이미 Git 저장소인 폴더 내에 또 다른 Git 저장소를 만들지 않아야 한다.(중첩금지)
절대로 홈 디렉토리에서 git init을 하지 않아야 한다.

(2) git status
- Working Directory와 Staging Area에 있는 파일의 현재 상태를 알려주는 명령어
- 어떤 작업을 시행하기 전에 수시로 status를 확인하면 좋다.
- 상태
    1. `Untracked` : Git이 관리하지 않는 파일 (한번도 Staging Area에 올라간 적 없는 파일)
    2. `Tracked` : Git이 관리하는 파일
        a. `Unmodified` : 최신 상태
        b. `Modified` : 수정되었지만 아직 Staging Area에는 반영하지 않은 상태
        c. `Staged` : Staging Area에 올라간 상태
(3) git add
- Working Directory에 있는 파일을 Staging Area로 올리는 명령어
- Git이 해당 파일을 추적(관리)할 수 있도록 만든다.
- `Untracked, Modified → Staged` 로 상태를 변경한다.

(4) git commit
- Staging Area에 올라온 파일의 변경 사항을 하나의 버전(커밋)으로 저장하는 명령어
- `커밋 메세지`는 현재 변경 사항들을 잘 나타낼 수 있도록 `의미` 있게 작성하는 것을 권장한다.
- 각각의 커밋은 `SHA-1` 알고리즘에 의해 반환 된 고유의 해시 값을 ID로 가진다.
- `(root-commit)` 은 해당 커밋이 최초의 커밋 일 때만 표시된다. 이후 커밋부터는 사라진다.
예) git commit -m "first commit"

(5) git log
- - 커밋의 내역(`ID, 작성자, 시간, 메세지 등`)을 조회할 수 있는 명령어
- 옵션
    - `--oneline` : 한 줄로 축약해서 보여준다.
    - `--graph` : 브랜치와 머지 내역을 그래프로 보여준다.
    - `--all` : 현재 브랜치를 포함한 모든 브랜치의 내역을 보여준다.
    - `--reverse` : 커밋 내역의 순서를 반대로 보여준다. (최신이 가장 아래)
    - `-p` : 파일의 변경 내용도 같이 보여준다.
    - `-2` : 원하는 갯수 만큼의 내역을 보여준다. (2 말고 임의의 숫자 사용 가능)


⁕ 로컬 저장소와 원격 저장소 연결하기
git init을 통해 폴더를 로컬 저장소로 만든다.
git remote : 원격 저장소를 등록, 조회, 삭제할 수 있는 명령어
    등록 :git remote add <이름> <주소> 형식으로 작성
    조회 : git remote -v 로 작성
    삭제 : git remote rm <이름> 혹은 git remote remove <이름> 으로 작성, 로컬과 원격 저장소의 연결을 끊는 것이지, 원격 저장소 자체를 삭제하는 게 아니다.

⁕ 원격 저장소에 업로드하기
정확히 말하면, 파일을 업로드하는 게 아니라 커밋을 업로드 하는 것
따라서 먼저 로컬 저장소에서 커밋을 생성해야 원격 저장소에 업로드 할 수 있다.
1. 로컬 저장소에서 커밋생성
이 파일을 예로 들면
    파일 저장(ctrl+s)후 
    git status 로 현재상태 확인
    git add git_basic.txt
    git commit -m "git_basic"
    git log --oneline 으로 커밋 확인
2. git push
    - 로컬 저장소의 커밋을 원격 저장소에 업로드하는 명령어
    - 'git push <저장소 이름> <브랜치 이름>` 형식으로 작성.
    - `-u` 옵션을 사용하면, 두 번째 커밋부터는 `저장소 이름, 브랜치 이름`을 생략 가능.
    이 파일을 예로 들면
    git push origin master

    (주의) Github 원격 저장소에 절대로 파일을 드래그해서 업로드 하지 않아야 한다!!!!

가끔 Github를 구글 드라이브처럼 여겨서, 파일을 직접 드래그해서 올리는 경우가 있다.
Git 명령어를 학습했기 때문에, 반드시 git add → git commit → git push 의 단계로만
업로드 해야한다.

그 이유는 로컬 저장소와 원격 저장소의 동기화 때문이다.
로컬 저장소에서 변경이 먼저 일어나고, 그 변경 사항을 원격 저장소에 반영하는 형태여야 한다.
하지만, Github에 드래그를 해서 파일을 업로드하면 원격 저장소에 변경이 먼저 일어나는 형태가 되기 때문에 이러한 행동을 지양해야 한다.
 